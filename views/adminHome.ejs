<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Hostel Complaint Portal</title>
    <link href="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.css" rel="stylesheet" />
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-red-50 min-h-screen flex flex-col items-center py-10">
       <div>
    <div class="absolute top-4 right-4">
      <form action="/user/logout" method="POST" class="inline">
    <button type="submit" 
        class="text-red-500 font-bold py-2 px-4 ">
        Logout
    </button>
</form>
    </div>
   </div>
    <img src="/manit.png" alt="Hostel Complaint Portal Logo" class="mb-6 w-24 h-24" />
    <h1 class="mb-5 text-center text-2xl text-red-700 sm:text-3xl font-bold">
        Hostel Complaint Portal Admin
    </h1>

    <!-- Buttons -->
    <div>
      <!-- Buttons visible on sm and up -->
      <div class="hidden sm:flex flex-row justify-center gap-4 w-full sm:w-auto px-4">
    <button id="recentComplaintBtn" 
        class="tab-btn bg-red-600 text-white border border-blue-600 px-6 py-3 rounded-lg shadow">
        Recent Complaints
    </button>
</div>


      

     



    <!-- Recent Complaints List -->
    <div id="recentComplaints" class="mt-6 w-full max-w-4xl p-6 space-y-10">
      <!-- Cards will be inserted here -->
    </div>

    

    <script>

        // Sample data for user and complaints
            

             function confirmResolve() {
                return confirm("Are you sure you want to mark this complaint as resolved?");
            }
        const user = <%-JSON.stringify(user) %>;
        const complaints = <%-JSON.stringify(complaints)%>;

            const recentComplaints = document.getElementById("recentComplaints");

            function getCategoryIcon(category) {
            switch (category) {
                case 'water':
                return `<svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" >
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 2C8 7 5 10 5 14a7 7 0 0014 0c0-4-3-7-7-12z" />
                </svg>`;
                case 'electricity':
                return `<svg class="w-6 h-6 text-yellow-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" >
                    <path stroke-linecap="round" stroke-linejoin="round" d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>`;
                case 'network':
                return `<svg class="w-6 h-6 text-green-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" 
                    stroke-linecap="round" stroke-linejoin="round">
                    <path d="M5.05 12.55a8 8 0 0 1 13.9 0" />
                    <path d="M8.46 15.16a4 4 0 0 1 7.07 0" />
                    <path d="M12 18.5h.01" />
                </svg>`;
                case 'mess':
                return `<svg class="w-6 h-6 text-orange-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="8" />
                <circle cx="12" cy="12" r="4" />
                <path d="M9 12c1-2 5-2 4 1" stroke-linejoin="round" />
                <path d="M10 14c0 1 3 1 3 0" stroke-linejoin="round" />
                </svg>`;



                case 'washroom':
                return `<svg class="w-6 h-6 text-purple-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10" />
                <rect x="6" y="14" width="12" height="4" rx="2" ry="2" /> <!-- Bathtub base -->
                <line x1="6" y1="14" x2="18" y2="14" /> <!-- Bathtub rim -->
                <line x1="9" y1="14" x2="9" y2="12" /> <!-- Bathtub side -->
                <line x1="15" y1="14" x2="15" y2="12" /> <!-- Bathtub side -->
                </svg>`;

                case 'general':
                return `<svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" >
                    <circle cx="12" cy="12" r="10" />
                </svg>`;
            }
            }

                        // 1️⃣ Create Sort Dropdown above complaints list
                const sortContainer = document.createElement("div");
                sortContainer.className = "flex justify-center items-center gap-4 mb-6";
                
                sortContainer.innerHTML = `
                            <div class="flex flex-wrap justify-center items-center gap-4 mt-6">
                                <div class="flex flex-col">
                                    <label for="categorySort" class="text-lg font-semibold text-gray-700">Select Category:</label>
                                    <select id="categorySort" class="border pr-10 text-black bg-red-300 border-gray-300 rounded-lg px-4 py-2 shadow focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <option value="all">All</option>
                                        <option value="water">Water</option>
                                        <option value="electricity">Electricity</option>
                                        <option value="network">Network</option>
                                        <option value="mess">Mess</option>
                                        <option value="washroom">Washroom</option>
                                        <option value="general">General</option>
                                    </select>
                                </div>

                                <div class="flex flex-col">
                                    <label for="statusSort" class="text-lg font-semibold text-gray-700">Select Status:</label>
                                    <select id="statusSort" class="border pr-10 text-black bg-red-300 border-gray-300 rounded-lg px-4 py-2 shadow focus:outline-none focus:ring-2 focus:ring-green-500">
                                        <option value="all">All</option>
                                        <option value="resolved">Resolved</option>
                                        <option value="pending">Pending</option>
                                    </select>
                                </div>
                            </div>
                        `;

                recentComplaints.parentNode.insertBefore(sortContainer, recentComplaints);

                // 2️⃣ Function to render complaints based on selected category
                
                function renderComplaints(filterCategory = "all", filterStatus = "all") {
                            recentComplaints.innerHTML = "";

                            const filteredComplaints = complaints.filter(comp => {
                                const categoryMatch = (filterCategory === "all" || comp.category.toLowerCase() === filterCategory.toLowerCase());
                                const statusMatch = (filterStatus === "all" || 
                                                    (filterStatus === "resolved" && comp.status.toLowerCase() === "resolved") ||
                                                    (filterStatus === "pending" && comp.status.toLowerCase() !== "resolved"));
                                return categoryMatch && statusMatch;
                            });

                            if (filteredComplaints.length === 0) {
                                const noComplaints = document.createElement("p");
                                noComplaints.className = "text-red-500 text-center mt-6";
                                noComplaints.textContent = "No complaints found for this filter.";
                                recentComplaints.appendChild(noComplaints);
                                return;
                            }

                            filteredComplaints.forEach(comp => {
                                const category = comp.category;
                                const categoryIcon = getCategoryIcon(category);

                              const statusBadge = comp.status === "resolved"
                                        ? `<div class="bg-green-100 text-green-700 px-4 py-1 rounded-full font-bold shadow mt-2 sm:mt-0">Resolved</div>`
                                        : `<form action="/admin/resolve/${comp._id}" method="POST" onsubmit="return confirmResolve()">
                                                <button type="submit" class="bg-red-100 text-yellow-700 px-4 py-1 rounded-full font-bold shadow mt-2 sm:mt-0 hover:bg-red-200">
                                                    Mark as resolved
                                                </button>
                                        </form>`;


                                const card = document.createElement("div");
                                card.className = "max-w-full sm:max-w-xl mx-auto p-6 sm:p-8 bg-white rounded-xl shadow-xl border border-gray-200 relative";
                                card.innerHTML = `
                                    <div class="flex flex-wrap justify-between items-center mb-4">
                                        <div class="flex items-center space-x-2 bg-blue-100 text-blue-700 px-3 py-1 rounded-full font-semibold shadow">
                                            <span class="inline-block">${categoryIcon}</span>
                                            <span>${comp.category}</span>
                                        </div>
                                        ${statusBadge}
                                    </div>
                                    <h2 class="text-2xl sm:text-4xl font-extrabold text-gray-900 text-center mb-6">${comp.title}</h2>

                <p class="text-gray-700 text-base sm:text-lg leading-relaxed mb-8 px-4 text-center max-w-full sm:max-w-xl mx-auto">
                    ${comp.description}
                </p>

                <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 sm:gap-6 text-gray-800 text-sm sm:text-base px-4 sm:px-8">
                    <div class="flex items-center space-x-2">
                        <svg class="w-5 h-5 sm:w-6 sm:h-6 text-gray-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M5.121 17.804A8.959 8.959 0 0112 15a8.959 8.959 0 016.879 2.804M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        <strong>${comp.user.username}</strong>
                    </div>
                    <div class="flex items-center space-x-2">
                        <svg class="w-5 h-5 sm:w-6 sm:h-6 text-gray-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M3 10h18M7 14h10M9 18h6" />
                        </svg>
                        <strong>${user.hostel_no}</strong>
                    </div>
                    <div class="flex items-center space-x-2">
                        <svg class="w-5 h-5 sm:w-6 sm:h-6 text-gray-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" >
                            <path stroke-linecap="round" stroke-linejoin="round" d="M4 21h16V7H4v14zM9 21V12h6v9" />
                            <circle cx="12" cy="16" r="1" />
                        </svg>
                        <strong>Room: ${comp.user.room_no}</strong>
                    </div>

                  
                  <div class="flex items-center space-x-2">
  
                    <div class="flex items-center space-x-2 whitespace-nowrap">
                    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 sm:w-6 sm:h-6 text-gray-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="4" y="7" width="16" height="14" />
                        <line x1="16" y1="3" x2="16" y2="7" />
                        <line x1="8" y1="3" x2="8" y2="7" />
                        <line x1="4" y1="11" x2="20" y2="11" />
                    </svg>
                    <strong>
                        ${new Date(comp.createdAt).toLocaleDateString('en-IN', { 
                        timeZone: 'Asia/Kolkata', 
                        day: '2-digit', 
                        month: 'long', 
                        year: 'numeric' 
                        })}
                    </strong>
                    </div>

                    </div>


                        <div class="ml-3 flex items-center space-x-1">
                        <svg class="w-5 h-5 sm:w-6 sm:h-6 text-gray-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" >
                            <path stroke-linecap="round" stroke-linejoin="round" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.518 4.553a1 1 0 01-.217 1.036l-2.27 2.27a11.042 11.042 0 005.516 5.516l2.27-2.27a1 1 0 011.036-.217l4.553 1.518a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C7.82 21 3 16.18 3 10V5z" />
                        </svg>
                        <strong>${comp.user.phone}</strong>
                        </div>

                </div>
            
                                `;
                                recentComplaints.appendChild(card);
                            });
                        }




                // 3️⃣ Sort dropdown change event
                document.getElementById("categorySort").addEventListener("change", () => {
                        renderComplaints(
                            document.getElementById("categorySort").value,
                            document.getElementById("statusSort").value
                        );
                    });

                    document.getElementById("statusSort").addEventListener("change", () => {
                        renderComplaints(
                            document.getElementById("categorySort").value,
                            document.getElementById("statusSort").value
                        );
                    });

                // 4️⃣ Initial render
                renderComplaints();

                
    </script>


    <script src="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.js"></script>

            <% if (typeof message !== "undefined" && message) { %>
        <script>
            window.onload = function() {
                alert("<%= message %>");
            }
        </script>
        <% } %>

</body>
</html>
