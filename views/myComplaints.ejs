<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Hostel Complaint Portal</title>
  <link href="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.css" rel="stylesheet" />
  <script src="https://cdn.tailwindcss.com"></script>
</head>

  <body class="bg-blue-50 min-h-screen flex flex-col items-center py-10">
          <div>
            <div class="absolute top-4 right-4">
              <form action="/user/logout" method="POST" class="inline">
            <button type="submit" 
                class="text-red-500 font-bold py-2 px-4 ">
                Logout
            </button>
              </form>
            </div>
          </div>
          <img src="/manit.png" alt="Hostel Complaint Portal Logo" class="mb-6 w-24 h-24" />
          <h1 class="mb-5 text-center text-2xl text-blue-700 sm:text-3xl font-bold">
            Hostel Complaint Portal 
          </h1>

        <!-- Buttons -->
        <div>
          <!-- Buttons visible on sm and up -->
          <div class="hidden sm:flex flex-row gap-4 w-full sm:w-auto px-4">

            <button id="recentComplaintBtn" class="tab-btn bg-white border border-blue-600 text-blue-600 px-6 py-3 rounded-lg shadow w-full sm:w-auto">Recent Complaints</button>
            <button id="myComplaintBtn" class="tab-btn bg-blue-600 text-white border border-blue-600 px-6 py-3 rounded-lg shadow w-full sm:w-auto">My Complaints</button>
            <button id="addComplaintBtn" class="tab-btn bg-white border border-blue-600 text-blue-600 px-6 py-3 rounded-lg shadow w-full sm:w-auto">Add Complaint</button>
            <div class="absolute top-4 right-4">
            </div>
          </div>

    <!-- Dropdown visible only on xs -->
          <div class="sm:hidden px-4 mt-4">

            <select id="complaintSelect" class="w-full border border-blue-600 bg-blue-500 text-white rounded-lg px-6 py-5 pr-12 shadow">
              <option value="recent">Recent Complaints</option>
              <option value="my" selected>My Complaints</option>
              <option value="add">Add Complaint</option>

            </select>
          </div>
        </div>

        <!-- My Complaints List -->
        <div id="myComplaints" class="mt-6 w-full max-w-4xl p-6 space-y-10">
          <!-- Complaint cards will be inserted here -->
        </div>


      <script>
              // Assume these come from your backend templating engine
              const user = <%- JSON.stringify(user) %>;
              const complaints = <%- JSON.stringify(complaints) %>;
              function formatCreatedAtToIST_Long(isoDate) {
                  const formatted = new Date(isoDate).toLocaleDateString('en-IN', {
                      timeZone: 'Asia/Kolkata',
                      day: '2-digit',
                      month: 'long',
                      year: 'numeric'
                  });
                  return `${formatted}`;
              }

        // Example
              console.log(formatCreatedAtToIST_Long('2025-08-09T14:48:36.385Z'));
            
              const myComplaintsDiv = document.getElementById("myComplaints");
              const complaintFormDiv = document.getElementById("complaintForm");

            // Helper: Returns SVG icon HTML for complaint category
            function getCategoryIcon(category) {
              switch (category) {
                case 'water':
                  return `<svg class="w-6 h-6 text-blue-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" >
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 2C8 7 5 10 5 14a7 7 0 0014 0c0-4-3-7-7-12z" />
                          </svg>`;
                case 'electricity':
                  return `<svg class="w-6 h-6 text-yellow-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" >
                            <path stroke-linecap="round" stroke-linejoin="round" d="M13 10V3L4 14h7v7l9-11h-7z" />
                          </svg>`;
                case 'network':
                return `<svg class="w-6 h-6 text-green-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" 
                            stroke-linecap="round" stroke-linejoin="round">
                            <path d="M5.05 12.55a8 8 0 0 1 13.9 0" />
                            <path d="M8.46 15.16a4 4 0 0 1 7.07 0" />
                            <path d="M12 18.5h.01" />
                        </svg>`;
                case 'mess':
                  return `<svg class="w-6 h-6 text-orange-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="8" />
                        <circle cx="12" cy="12" r="4" />
                        <path d="M9 12c1-2 5-2 4 1" stroke-linejoin="round" />
                        <path d="M10 14c0 1 3 1 3 0" stroke-linejoin="round" />
                        </svg>`;
                case 'washroom':
                  return `<svg class="w-6 h-6 text-purple-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="10" />
                        <rect x="6" y="14" width="12" height="4" rx="2" ry="2" /> <!-- Bathtub base -->
                        <line x1="6" y1="14" x2="18" y2="14" /> <!-- Bathtub rim -->
                        <line x1="9" y1="14" x2="9" y2="12" /> <!-- Bathtub side -->
                        <line x1="15" y1="14" x2="15" y2="12" /> <!-- Bathtub side -->
                        </svg>`;
                case 'general':
                  return `<svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" >
                            <circle cx="12" cy="12" r="10" />
                          </svg>`;
                default:
                  return '';
              }
            }

            // Render complaints inside myComplaintsDiv
            // 1️⃣ Create Sort Dropdown
            const sortContainer = document.createElement("div");
            sortContainer.className = "flex justify-center items-center gap-4 mb-6";

            sortContainer.innerHTML = `
                      <label for="categorySortMy" class="text-lg mt-10 font-semibold text-gray-700">Select Category:</label>
                      <select id="categorySortMy" class="border mt-10 bg-blue-600 border-gray-300 rounded-lg px-4 py-2 text-white shadow focus:outline-none focus:ring-2 focus:ring-blue-500">
                          <option value="all">All</option>
                          <option value="Water">Water</option>
                          <option value="Electricity">Electricity</option>
                          <option value="Network">Network</option>
                          <option value="Mess">Food</option>
                          <option value="Washroom">Washroom</option>
                          <option value="General">General</option>
                      </select>
            `;

              // Insert sort dropdown before complaints list
              myComplaintsDiv.parentNode.insertBefore(sortContainer, myComplaintsDiv);

              // 2️⃣ Render complaints (with filter)
            function renderMyComplaints(filterCategory = "all") {
                myComplaintsDiv.innerHTML = ""; // Clear previous
                    // Filter complaints first
                const filteredComplaints = complaints.filter(
                    comp => filterCategory === "all" || comp.category.toLowerCase() === filterCategory.toLowerCase()
            );

            // If none found, show message and return early
            if (filteredComplaints.length === 0) {
                console.log("No complaints found for this category.");
                const noComplaints = document.createElement("p");
                noComplaints.className = "text-red-500 text-center mt-6";
                noComplaints.textContent = "No complaints found for this category.";
                myComplaintsDiv.appendChild(noComplaints);
                return;
            }

  
        filteredComplaints.forEach(comp => {
            const categoryIcon = getCategoryIcon(comp.category);

            const card = document.createElement("div");
            card.className = "max-w-full sm:max-w-xl mx-auto p-6 sm:p-8 bg-white rounded-xl shadow-xl border border-gray-200";

            const statusBadge = comp.status === "resolved"
                ? `<div class="bg-green-100 text-green-700 px-4 py-1 rounded-full font-bold shadow mt-2 sm:mt-0">
                        Resolved
                   </div>`
                : `<form action="/complaint/resolve/${comp._id}" method="POST" onsubmit="return confirmResolve()">
                        <button 
                            type="submit"
                            class="bg-red-100 text-red-700 px-4 py-1 rounded-full font-bold shadow mt-2 sm:mt-0 hover:bg-red-200"
                        >
                            Mark as resolved
                        </button>
                   </form>`;

            card.innerHTML = `
                <!-- Flex badges -->
                <div class="flex flex-wrap justify-between items-center mb-4">
                    <div class="flex items-center space-x-2 bg-blue-100 text-blue-700 px-3 py-1 rounded-full font-semibold shadow">
                        <span class="inline-block">${categoryIcon}</span>
                        <span>${comp.category}</span>
                    </div>
                    ${statusBadge}
                </div>

                <h2 class="text-2xl sm:text-4xl font-extrabold text-gray-900 text-center mb-6">${comp.title}</h2>

                <p class="text-gray-700 text-base sm:text-lg leading-relaxed mb-8 px-4 text-center max-w-full sm:max-w-xl mx-auto">
                    ${comp.description}
                </p>

                <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 sm:gap-6 text-gray-800 text-sm sm:text-base px-4 sm:px-8">
                    <div class="flex items-center space-x-2">
                        <svg class="w-5 h-5 sm:w-6 sm:h-6 text-gray-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M5.121 17.804A8.959 8.959 0 0112 15a8.959 8.959 0 016.879 2.804M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        <strong>${comp.user.username}</strong>
                    </div>
                    <div class="flex items-center space-x-2">
                        <svg class="w-5 h-5 sm:w-6 sm:h-6 text-gray-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M3 10h18M7 14h10M9 18h6" />
                        </svg>
                        <strong>${user.hostel_no}</strong>
                    </div>
                     <div class="flex items-center space-x-2">
                        <svg class="w-5 h-5 sm:w-6 sm:h-6 text-gray-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" >
                            <path stroke-linecap="round" stroke-linejoin="round" d="M4 21h16V7H4v14zM9 21V12h6v9" />
                            <circle cx="12" cy="16" r="1" />
                        </svg>
                        <strong>Room: ${comp.user.room_no}</strong>
                    </div>

                  
                  <div class="flex items-center space-x-2">
  
                  <div class="flex items-center space-x-2 whitespace-nowrap">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 sm:w-6 sm:h-6 text-gray-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round">
                    <rect x="4" y="7" width="16" height="14" />
                    <line x1="16" y1="3" x2="16" y2="7" />
                    <line x1="8" y1="3" x2="8" y2="7" />
                    <line x1="4" y1="11" x2="20" y2="11" />
                  </svg>
                  <strong>
                    ${new Date(comp.createdAt).toLocaleDateString('en-IN', { 
                      timeZone: 'Asia/Kolkata', 
                      day: '2-digit', 
                      month: 'long', 
                      year: 'numeric' 
                    })}
                  </strong>
                </div>

                </div>
                </div>
            `;

            myComplaintsDiv.appendChild(card);
        });
      }

            // Confirmation dialog
            function confirmResolve() {
                return confirm("Once marked as resolved, you cannot change it back. Continue?");
            }


            // 3️⃣ Listen for sort change
            document.getElementById("categorySortMy").addEventListener("change", (e) => {
                renderMyComplaints(e.target.value);
            });

            // 4️⃣ Initial load
            renderMyComplaints();

   

            // Button elements
            const recentBtn = document.getElementById('recentComplaintBtn');
            const myBtn = document.getElementById('myComplaintBtn');
            const addBtn = document.getElementById('addComplaintBtn');

            // Dropdown
            const complaintSelect = document.getElementById('complaintSelect');

            // Show/hide sections utility
            function showSection(section) {
              if (section === 'recent') {
                // Redirect for recent complaints
                window.location.href = '/user/home';
              } else if (section === 'my') {
                myComplaintsDiv.classList.remove('hidden');
                complaintFormDiv.classList.add('hidden');
              } else if (section === 'add') {
                window.location.href = '/complaint/add';
              }
              setActiveButton(section);
            }

            // Set active button style
            function setActiveButton(activeSection) {
              const map = {
                recent: recentBtn,
                my: myBtn,
                add: addBtn
              };

              [recentBtn, myBtn, addBtn].forEach(btn => {
                btn.classList.remove('bg-blue-600', 'text-white');
                btn.classList.add('bg-white', 'text-blue-600');
              });

              if (map[activeSection]) {
                map[activeSection].classList.add('bg-blue-600', 'text-white');
                map[activeSection].classList.remove('bg-white', 'text-blue-600');
              }
            }

            // Button click handlers
            recentBtn.addEventListener('click', () => showSection('recent'));
            myBtn.addEventListener('click', () => showSection('my'));
            addBtn.addEventListener('click', () => showSection('add'));

            // Dropdown change handler
            complaintSelect.addEventListener('change', (e) => {
              showSection(e.target.value);
            });

            // On page load default to My Complaints
            showSection('my');
          </script>
          <script>
            <% if (typeof message !== "undefined" && message) { %>
                alert("<%= message %>");
            <% } %>
    </script>

    <script src="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.js"></script>
  </body>
</html>
